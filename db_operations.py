from mysql.connector import Error
import pandas as pd
import db_init

def delete_data(region_code):
    cursor, db = db_init.connect_to_data()
    if not cursor:
        return

    try:
        table_name = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ").strip()
        if table_name not in db_init.table_mapping:
            print(f"‚ùó –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        confirmation = input(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_code} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'? (y/n): ").strip().lower()
        if confirmation == 'y':
            cursor.execute("USE reg_finance")
            cursor.execute(f"DELETE FROM `{table_name}` WHERE –∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞ = %s", (region_code,))
            db.commit()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ {region_code} —É–¥–∞–ª–µ–Ω—ã –∏–∑ '{table_name}'.")
        else:
            print("‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Error as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        if db:
            db.close()

def add_data(region_code):
    cursor, db = db_init.connect_to_data()
    if not cursor:
        return

    try:
        table_name = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ").strip()
        if table_name not in db_init.table_mapping:
            print(f"‚ùó –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        df = db_init.create_df(table_name)
        if df is None:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
            return

        column_names = list(df.columns)
        if 'id' in column_names:
            column_names.remove('id')
        if '–∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞' in column_names:
            column_names.remove('–∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞')

        values = [db_init.numeric_convert(region_code)]
        columns_for_query = ['–∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞']

        print("üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è NULL):")
        for col in column_names:
            value = input(f"  ‚û§ {col}: ").strip()
            values.append(None if value == "" else db_init.numeric_convert(value))
            columns_for_query.append(col)

        placeholders = ', '.join(['%s'] * len(columns_for_query))
        escaped_columns = [f"`{column}`" for column in columns_for_query]
        sql = f"INSERT INTO `{table_name}` ({', '.join(escaped_columns)}) VALUES ({placeholders})"

        cursor.execute("USE reg_finance")
        cursor.execute(sql, values)
        db.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    except Error as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        if db:
            db.close()

def edit_data(region_code):
    cursor, db = db_init.connect_to_data()
    if not cursor:
        return

    try:
        table_name = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
        if table_name not in db_init.table_mapping:
            print(f"‚ùó –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        df = db_init.create_df(table_name)
        if df is None or df.empty:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return
        if int(region_code) not in df.index:
            print(f"‚ùó –†–µ–≥–∏–æ–Ω {region_code} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            return

        print("üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for i, col in enumerate(df.columns):
            print(f"  {i + 1}. {col}")
        column_index = int(input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞: ")) - 1
        column_name = df.columns[column_index]

        new_value = input(f"üñäÔ∏è –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{column_name}': ").strip()
        new_value = None if new_value == "" else db_init.numeric_convert(new_value)

        sql = f"UPDATE `{table_name}` SET `{column_name}` = %s WHERE –∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞ = %s"
        cursor.execute("USE reg_finance")
        cursor.execute(sql, (new_value, region_code))
        db.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Error as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        if db:
            db.close()

def view_data():
    table_name = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ").strip()
    if table_name not in db_init.table_mapping:
        print(f"‚ùó –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    df = db_init.create_df(table_name)
    if df is None or df.empty:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return
    print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}':")
    print(df)

def show_region_data(region_code):
    cursor, db = db_init.connect_to_data()
    if not cursor:
        return

    try:
        cursor.execute("USE reg_finance")
        excluded_tables = {'–∫–æ–¥—ã_—Ä–µ–≥–∏–æ–Ω–æ–≤', '–∫–æ–¥—ã_–æ–∫—Ä—É–≥–æ–≤'}
        for table in db_init.table_mapping:
            if table in excluded_tables:
                continue
            cursor.execute(f"SELECT * FROM `{table}` WHERE –∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞ = %s", (region_code,))
            rows = cursor.fetchall()
            if rows:
                print(f"\nüìÇ –¢–∞–±–ª–∏—Ü–∞: {table}")
                for row in rows:
                    print(row)
    except Error as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if db:
            db.close()


def show_multiple_regions_data(table_name, region_codes):
    cursor, db = db_init.connect_to_data()
    if not cursor:
        return

    try:
        cursor.execute("USE reg_finance")
        placeholders = ', '.join(['%s'] * len(region_codes))
        sql = f"SELECT * FROM `{table_name}` WHERE –∫–æ–¥_—Ä–µ–≥–∏–æ–Ω–∞ IN ({placeholders})"
        cursor.execute(sql, tuple(region_codes))
        rows = cursor.fetchall()
        if rows:
            print(f"\nüìÇ –¢–∞–±–ª–∏—Ü–∞: {table_name}")
            for row in rows:
                print(row)
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.")
    except Error as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if db:
            db.close()
